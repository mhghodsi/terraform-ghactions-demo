name: Terraform Bucket Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]
      action:
        description: 'Action to perform'
        required: true
        default: 'create'
        type: choice
        options: [create, delete]
      bucket_name:
        description: 'Name of the bucket to create or delete (without env prefix)'
        required: true
        type: string

jobs:
  terraform:
    runs-on: ubuntu-latest

    # Make TF input vars available to Terraform
    env:
      TF_VAR_github_token: ${{ secrets.TF_VAR_GITHUB_TOKEN }}
      TF_VAR_github_owner: ${{ github.repository_owner }}

    steps:
      # Enforce main branch only
      - name: Check branch
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          echo "This workflow should only be run from the main branch"
          echo "Current ref: $GITHUB_REF"
          exit 1

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Initialize Terraform
        run: terraform init -input=false

      - name: Select/Create Workspace
        run: |
          ENV_LOWER="$(echo "${{ github.event.inputs.environment }}" | tr '[:upper:]' '[:lower:]')"
          terraform workspace select -or-create "$ENV_LOWER"
          echo "Using workspace: $(terraform workspace show)"

      # ----- CREATE -----
      - name: Create bucket (plan)
        if: ${{ github.event.inputs.action == 'create' }}
        run: |
          cat > terraform.tfvars << 'EOF'
          bucket_name   = "${{ github.event.inputs.bucket_name }}"
          create_bucket = true
          bucket_acl    = "private"
          EOF

          terraform fmt -recursive
          terraform validate
          terraform plan -input=false -out=create.plan

      - name: Create bucket (apply)
        if: ${{ github.event.inputs.action == 'create' }}
        run: terraform apply -input=false -auto-approve create.plan

      # ----- DELETE -----
      # With count = var.create_bucket ? 1 : 0, setting create_bucket=false
      # makes Terraform plan a destroy for the existing bucket in this workspace.
      - name: Delete bucket (plan)
        if: ${{ github.event.inputs.action == 'delete' }}
        run: |
          cat > terraform.tfvars << 'EOF'
          bucket_name   = "${{ github.event.inputs.bucket_name }}"
          create_bucket = false
          # acl not needed for delete
          EOF

          terraform fmt -recursive
          terraform validate
          terraform plan -input=false -out=destroy.plan

      - name: Delete bucket (apply)
        if: ${{ github.event.inputs.action == 'delete' }}
        run: terraform apply -input=false -auto-approve destroy.plan
