name: Terraform Bucket Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'create'
        type: choice
        options:
          - create
          - delete
      bucket_name:
        description: 'Name of the bucket to create or delete (without env prefix)'
        required: true
        type: string

jobs:
  terraform:
    runs-on: ubuntu-latest
    
    steps:
      # Check if workflow is being run from the main branch
      - name: Check branch
        run: |
          if [[ "$GITHUB_REF" != "refs/heads/main" ]]; then
            echo "This workflow should only be run from the main branch"
            echo "Current branch: $GITHUB_REF"
            exit 1
          fi
      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.4.0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Initialize Terraform
        run: terraform init
      
      - name: Select Workspace
        run: |
          terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}
          echo "Using workspace: $(terraform workspace show)"
      
      - name: Create bucket
        if: github.event.inputs.action == 'create'
        run: |
          # Create tfvars file with the bucket configuration
          cat << EOF > terraform.tfvars
          bucket_name = "${{ github.event.inputs.bucket_name }}"
          create_bucket = true
          bucket_acl = "private"
          EOF
          
          # Show the plan
          terraform plan
          
          # Apply the changes
          terraform apply -auto-approve
      
      - name: Delete bucket
        if: github.event.inputs.action == 'delete'
        run: |
          # Create a temporary tfvars file
          cat << EOF > terraform.tfvars
          bucket_name = "${{ github.event.inputs.bucket_name }}"
          EOF
          
          # Show bucket to be deleted
          echo "Deleting bucket: ${{ github.event.inputs.bucket_name }} (with workspace prefix)"
          echo "In workspace: $(terraform workspace show)"
          
          # Destroy the specific bucket
          terraform destroy -target="module.s3_bucket[0]" -auto-approve
