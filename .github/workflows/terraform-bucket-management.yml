name: Terraform Bucket Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options: [dev, prod]
      action:
        description: 'Action to perform'
        required: true
        default: 'create'
        type: choice
        options: [create, delete]
      bucket_name:
        description: 'Name of the bucket to create or delete (without env prefix)'
        required: true
        type: string

jobs:
  request-approval:
    name: Request Approval
    runs-on: ubuntu-latest
    # Business logic for approvals is embedded here rather than in workflow inputs
    # To change approvers or approval requirements, modify the "Manual Approval" step below
    steps:
      - name: Display action details
        run: |
          ACTION=$(echo "${{ github.event.inputs.action }}" | tr '[:lower:]' '[:upper:]')
          echo "::notice title=Approval Required::${ACTION} bucket ${{ github.event.inputs.environment }}-${{ github.event.inputs.bucket_name }}"
          echo "Waiting for approval to ${{ github.event.inputs.action }} bucket in environment ${{ github.event.inputs.environment }}."

      - name: Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          # Approvers: Comma-separated list of GitHub usernames who can approve the request
          approvers: mhghodsi
          # Minimum approvals: Number of approvals required to proceed
          minimum-approvals: 1
          issue-title: "Approval for ${{ github.event.inputs.action }} bucket in ${{ github.event.inputs.environment }}"
          issue-body: "Please approve or deny the following operation:\n\n- **Action:** ${{ github.event.inputs.action }}\n- **Environment:** ${{ github.event.inputs.environment }}\n- **Bucket name:** ${{ github.event.inputs.environment }}-${{ github.event.inputs.bucket_name }}\n\nInitiated by: ${{ github.actor }}"
          exclude-workflow-initiator-as-approver: false
  
  terraform:
    name: ${{ github.event.inputs.action }} ${{ github.event.inputs.environment }}-${{ github.event.inputs.bucket_name }}
    runs-on: ubuntu-latest
    needs: [request-approval]
    if: needs.request-approval.result == 'success'

    # Make TF input vars available to Terraform
    env:
      TF_VAR_github_token: ${{ secrets.TF_VAR_GITHUB_TOKEN }}
      TF_VAR_github_owner: ${{ github.repository_owner }}

    steps:
      # Enforce main branch only
      - name: Check branch
        if: ${{ github.ref != 'refs/heads/main' }}
        run: |
          echo "This workflow should only be run from the main branch"
          echo "Current ref: $GITHUB_REF"
          exit 1
          
      - name: Display action details
        run: |
          ACTION=$(echo "${{ github.event.inputs.action }}" | tr '[:lower:]' '[:upper:]')
          echo "::notice title=Bucket Operation::${ACTION} bucket ${{ github.event.inputs.environment }}-${{ github.event.inputs.bucket_name }} (with random suffix to be added)"
          
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Initialize Terraform
        run: terraform init -input=false

      - name: Select/Create Workspace
        run: |
          ENV_LOWER="$(echo "${{ github.event.inputs.environment }}" | tr '[:upper:]' '[:lower:]')"
          terraform workspace select -or-create "$ENV_LOWER"
          echo "Using workspace: $(terraform workspace show)"

      - name: Show backend type
        run: |
          awk 'BEGIN{inblock=0} /backend *"s3"/{inblock=1} inblock{print} /\}/{if(inblock){exit}}' backend.tf || true
          # also confirm there's no local state lying around
          test ! -f terraform.tfstate && echo "No local terraform.tfstate (good)"

      # ----- CREATE -----
      - name: Create bucket (plan)
        if: ${{ github.event.inputs.action == 'create' }}
        run: |
          cat > terraform.tfvars << 'EOF'
          bucket_name   = "${{ github.event.inputs.bucket_name }}"
          create_bucket = true
          bucket_acl    = "private"
          EOF

          terraform fmt -recursive
          terraform validate
          terraform plan -input=false -out=create.plan

      - name: Create bucket (apply)
        if: ${{ github.event.inputs.action == 'create' }}
        run: terraform apply -input=false -auto-approve create.plan
        
      - name: Output created bucket info
        if: ${{ github.event.inputs.action == 'create' }}
        run: |
          echo "::notice title=Bucket Creation Summary::Created bucket with prefix ${{ github.event.inputs.environment }}-${{ github.event.inputs.bucket_name }} in workspace $(terraform workspace show)"
          terraform output -json | jq

      # ----- DELETE -----
      # With count = var.create_bucket ? 1 : 0, setting create_bucket=false
      # makes Terraform plan a destroy for the existing bucket in this workspace.
      - name: Delete bucket (plan)
        if: ${{ github.event.inputs.action == 'delete' }}
        run: |
          cat > terraform.tfvars << 'EOF'
          bucket_name   = "${{ github.event.inputs.bucket_name }}"
          create_bucket = false
          # acl not needed for delete
          EOF

          terraform fmt -recursive
          terraform validate
          terraform plan -input=false -out=destroy.plan

      - name: Delete bucket (apply)
        if: ${{ github.event.inputs.action == 'delete' }}
        run: terraform apply -input=false -auto-approve destroy.plan
        
      - name: Output deleted bucket info
        if: ${{ github.event.inputs.action == 'delete' }}
        run: |
          echo "::notice title=Bucket Deletion Summary::Deleted bucket with prefix ${{ github.event.inputs.environment }}-${{ github.event.inputs.bucket_name }} in workspace $(terraform workspace show)"
          
      - name: Set workflow summary
        run: |
          ACTION=$(echo "${{ github.event.inputs.action }}" | tr '[:lower:]' '[:upper:]')
          echo "## Bucket Operation: ${ACTION}" >> $GITHUB_STEP_SUMMARY
          echo "* **Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Bucket name:** ${{ github.event.inputs.environment }}-${{ github.event.inputs.bucket_name }} (plus random suffix)" >> $GITHUB_STEP_SUMMARY
          echo "* **Workspace:** $(terraform workspace show)" >> $GITHUB_STEP_SUMMARY
